int[] tab1 = { 4, 1, 3, 5, 2 };
            for (int i = 0; i < tab1.Length; i++)
            {
                for (int j = 0; j < tab1.Length - i - 1; j++)
                {
                    if (tab1[j] >= tab1[j + 1])
                    {
                        int x = tab1[j];
                        tab1[j] = tab1[j + 1];
                        tab1[j + 1] = x;
                    }
                }
            }
            for (int i = 0; i < tab1.Length; i++)
            {
                string String = tab1[i].ToString();
                MessageBox.Show(String);
            }


int[] insertSort(int[] tab)
            {
                for (int i = 1; i < tab.Length; i++)
                {
                    for(int j = i; j > 0; j--)
                    {
                        if (tab[j] < tab[j - 1])
                        {
                            int x = tab[j];
                            tab[j] = tab[j - 1];
                            tab[j - 1] = x;
                        }
                    }
                }
                return tab;
            }
            int[] tab = { 4, 1, 3, 5, 2 };
            int[] tab2 = insertSort(tab);
            for(int i = 0; i < tab2.Length; i++)
            {
                string String = tab2[i].ToString();
                MessageBox.Show(String);
            }


merge, counting, quick sort DOM

ms(t,p,r){
 if(p<r){
  q=p+r/2
  ms(t,p,q)
  ms(t,q+1,r)
  scal(t,p,q,r)
 }
}